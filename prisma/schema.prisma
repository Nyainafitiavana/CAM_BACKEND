// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Status {
  id          Int         @id @default(autoincrement())
  designation String
  code        String
  User        User[]
  Account     Account[]
  Operation   Operation[]
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  is_admin  Boolean
  email     String      @unique
  phone     String?
  password  String
  status    Status      @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statusId  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Operation Operation[]
  History   History[]
}

model Account {
  id          Int         @id @default(autoincrement())
  designation String
  description String?     @db.VarChar(3000)
  year        Int
  status      Status      @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statusId    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Operation   Operation[]
}

model Operation {
  id        Int      @id @default(autoincrement())
  is_credit Boolean
  month     Int
  year      Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  status    Status   @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  statusId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id          Int      @id @default(autoincrement())
  description String?  @db.VarChar(3000)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  createdAt   DateTime @default(now())
}
